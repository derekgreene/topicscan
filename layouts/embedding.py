import logging as log
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_bootstrap_components as dbc
# TopicScan imports
from webconfig import config
from layouts.general import GeneralLayout
from layouts.dftable import DataFrameTable

# --------------------------------------------------------------

class EmbeddingLayout( GeneralLayout ):

	def __init__( self, webcore, embedding_metadata ):
		super(EmbeddingLayout, self).__init__( webcore )
		# page details
		self.page_title = "%s - Embedding" % self.page_title
		self.page_suffix = "-embedding"
		# current state
		self.metadata = embedding_metadata
		self.embed = None

	def get_header_subtext( self ):
		return self.metadata["id"]

	def generate_main_panel( self ):
		return html.Div([
			dbc.Row( [
					html.Div([
						dcc.Link(id="aneighbor"),
						dbc.Col( self.generate_neighbor_card() ) ],
						className='col-lg-12'
					), 
					html.Div([
						dcc.Link(id="aheatmap"),
						dbc.Col( self.generate_heatmap_card() ) ],
						className='col-lg-12'
					), 
				])
			], className='content'
		)

	def generate_neighbor_card( self ):
		query_string = config.get("query_sample", "")
		return dbc.Card(
			[
				dbc.CardHeader("Embedding Term Neighbors", className="card-header"),
				dbc.CardBody(
					[
						html.Div( self.generate_neighbor_card_text(), className="card-text"),
						dbc.InputGroup(
							[
								dbc.InputGroupAddon("Query Terms", addon_type="prepend"),
								dbc.Input(id="query-embed", value=query_string, placeholder="Enter a list of comma-separated terms...", 
									type="text", debounce=True, className="custom-text"),
							]
						),
						html.Div( self.generate_neighbor_table( query_string ), id='content_neighbor_table' ),
					]
				),
			],
		)

	def generate_heatmap_card( self ):
		query_string = config.get("query_sample", "")
		return dbc.Card(
			[
				dbc.CardHeader("Embedding Term Similarity Heatmap", className="card-header"),
				dbc.CardBody(
					[
						html.Div( self.generate_heatmap_card_text(), className="card-text"),
						html.Div( self.generate_embed_heatmap( query_string ), id='content_embed_heatmap'),
					]
				)
			],
		)
	def generate_neighbor_card_text( self ):
		num_neighbors = config.get("num_neighbors", 10)
		text = "The word embedding *%s* was generated by the *%s* algorithm on the %s, " % ( 
			self.metadata["id"], self.metadata["algorithm"]["id"], self.metadata["description"] )
		text += " where each term is represented by a vector of %d dimensions." % ( self.metadata["dimensions"] )
		text += "\n\nEnter one or more query terms and hit return to show a list of the %d most similar neighbor terms for each query term, based on the similarities in the word embedding." % num_neighbors
		text += " The final row of the table shows the %d most similar neighbors for the combined set of query terms when considered together." % num_neighbors
		return dcc.Markdown(text)

	def generate_heatmap_card_text( self ):
		text = "The heatmap visualization below shows the similarities between all query terms entered above,"
		text += " and the %d neighbors of those terms." % config.get("num_neighbors", 10)
		text += " The similarities of the terms are based on the word embedding *%s* selected above." % self.metadata["id"]
		return dcc.Markdown(text)

	def __parse_query_string( self, query_string ):
		""" Parse a string of query terms, as inputted by a user through the query form. """
		if query_string is None or query_string == "":
			return []
		query = []
		for part in query_string.lower().split(","):
			term = part.strip()
			if len(term) > 1 and not term in query:
				query.append(term)
		return query

	def __create_neighbor_df( self, query ):
		rows = []
		top_label = "Top %d Neighbor Terms" % config.get("num_neighbors", 10)
		columns = [ "Query Term", top_label ]
		# generate the individual recommendations
		top_label = "Top %d Neighbor Terms" % config.get("num_neighbors", 10)
		columns = [ "Query Term", top_label ]
		for query_term in query:
			neighbors = self.embed.get_neighbors( query_term, num_neighbors = config.get("num_neighbors", 10) )
			row = { "Query Term" : query_term, top_label : ", ".join( neighbors ) }
			rows.append( row )
		# generate the overall combination
		neighbors = self.embed.get_neighbors( query, num_neighbors = config.get("num_neighbors", 10) )
		row = { "Query Term" : "Combined Query", top_label : ", ".join( neighbors ) }
		rows.append( row )
		return pd.DataFrame( rows )

	def generate_neighbor_table( self, query_string = "" ):
		# parse the query string
		query = self.__parse_query_string( query_string )
		if len(query) == 0:
			return ""
		# get the embedding
		if self.embed is None:
			self.embed = self.webcore.get_embedding(self.metadata["id"])
			if self.embed is None:
				return ""
		df = self.__create_neighbor_df( query )
		return DataFrameTable( df, id="neighbor-table", summary_row=True, striped=False, hover=False ).generate_layout()

	def __calculate_similarity_df( self, terms ):
		""" Calculate similarity matrix between specified terms. Note that this 
		assumes the embedding model has been previously loaded. """
		n = len(terms)
		rows = []
		for i in range(n):
			rows.append( { "term1" : terms[i], "term2" : terms[i], "sim" : 1.0 } )
			for j in range(i+1,n):
				if terms[i] in self.embed and terms[j] in self.embed:
					sim = round( self.embed.similarity( terms[i], terms[j] ), config.get("precision",3) )
				else:
					sim = 0.0
				rows.append( { "term1" : terms[i], "term2" : terms[j], "sim" : sim } )
				rows.append( { "term1" : terms[j], "term2" : terms[i], "sim" : sim } )
		return pd.DataFrame( rows )

	def generate_embed_heatmap( self, query_string ):
		# parse the query string
		query = self.__parse_query_string( query_string )
		if len(query) == 0:
			return ""
		# get the embedding
		if self.embed is None:
			self.embed = self.webcore.get_embedding(self.metadata["id"])
			if self.embed is None:
				return ""
		# get all unique terms
		all_terms =  []
		for query_term in query:
			all_terms.append( query_term )
			neighbors = self.embed.get_neighbors( query_term, num_neighbors = config.get("num_neighbors", 10) )
			for term in neighbors:
				if not term in all_terms:
					all_terms.append( term )
		df = self.__calculate_similarity_df( all_terms )
		return dcc.Graph(
			id='chart_topicheatmap',
			figure={
				'data': [
					{
						'x': df["term1"], 
						'y': df["term2"],
						'z': df["sim"],
						'type': 'heatmap',		    		
						'hoverlabel' : { 'bgcolor' : 'rgb(250, 246, 208)' },
						# 'hovertemplate': '<b>%text</b><br>Similarity: %{z}<extra></extra>',
					},
				],
				'layout': 
				{ 
					'margin': { "t" : 2 },
					'height': 900,
					"yaxis" : { "autorange" : 'reversed'},
				}
			})	
